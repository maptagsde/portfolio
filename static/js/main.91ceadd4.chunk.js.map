{"version":3,"sources":["components/Sidebar.js","components/Introduction.js","components/About.js","components/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","large","width","spacing","height","Sidebar","classes","Container","style","backgroundColor","Grid","container","direction","justify","alignItems","item","Avatar","alt","src","className","Typography","variant","activeClass","to","spy","smooth","offset","duration","Link","href","target","rel","Introduction","id","maxWidth","backgroundImage","About","component","Timeline","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91ceadd4.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Link as Section, animateScroll as scroll } from \"react-scroll\";\n\n//MUI\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Link from \"@material-ui/core/Link\";\n\n//Icons\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport { Container } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  large: {\n    width: theme.spacing(20),\n    height: theme.spacing(20)\n  }\n}));\n\nexport const Sidebar = () => {\n  const classes = useStyles();\n\n  return (\n    <Fragment>\n      <Container style={{ backgroundColor: \"#cfe8fc\", height: \"100vh\" }}>\n        <Grid\n          container\n          spacing={3}\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item></Grid>\n          <Grid item>\n            <Avatar\n              alt=\"Fake Person\"\n              src=\"./images/me.png\"\n              className={classes.large}\n            />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h4\">Simon Appelt</Typography>\n            <Grid container justify=\"center\">\n              <Grid item>\n                <RoomIcon />\n              </Grid>\n              <Grid item>\n                <Typography variant=\"subtitle1\">Hamburg</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          {/*E-Mail + Icon */}\n          <Grid item>\n            <Grid container>\n              <Grid item>\n                <EmailIcon />\n              </Grid>\n              <Grid item>\n                <Typography variant=\"subtitle1\">me@simonappelt.de</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Links + Section */}\n          <Grid item>\n            <Grid\n              container\n              spacing={0}\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <Typography variant=\"button\">\n                  <Section\n                    activeClass=\"active\"\n                    to=\"introduction\"\n                    spy={true}\n                    smooth={true}\n                    offset={0}\n                    duration={500}\n                  >\n                    Introduction\n                  </Section>\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"button\">\n                  <Section\n                    to=\"about\"\n                    activeClass=\"active\"\n                    spy={true}\n                    smooth={true}\n                    offset={0}\n                    duration={500}\n                  >\n                    About\n                  </Section>\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"button\">\n                  <Section\n                    to=\"timeline\"\n                    activeClass=\"active\"\n                    spy={true}\n                    smooth={true}\n                    offset={0}\n                    duration={500}\n                  >\n                    Timeline\n                  </Section>\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Social */}\n          <Grid item>\n            <Grid\n              container\n              spacing={2}\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <Link\n                  href=\"https://www.twitter.com/maptagsde\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <TwitterIcon />\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link\n                  href=\"https://github.com/maptagsde\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <GitHubIcon />\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link\n                  href=\"https://de.linkedin.com/in/maptagsde\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <LinkedInIcon />\n                </Link>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"body2\">Some Text about me</Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nexport const Introduction = ({ id }) => {\n  let Background = \"./images/intro.jpg\";\n  return (\n    <Container\n      id={id}\n      maxWidth=\"xl\"\n      style={{\n        backgroundImage: `url(${Background})`,\n        height: \"100vh\"\n      }}\n    >\n      <Typography>This is my Introduction Page.</Typography>\n    </Container>\n  );\n};\n\n{\n  /*\n<Grid\n      container\n      id={id}\n      maxWidth=\"xl\"\n      style={{\n        height: \"100vh\"\n      }}\n    >\n      <Grid item xs={3}></Grid>\n      <Grid item xs={9}>\n        <Container\n          maxWidth=\"xl\"\n          style={{\n            height: \"100vh\",\n            backgroundImage: `url(${Background})`,\n            backgroundSize: \"contain\"\n          }}\n        >\n          <Typography>This is my Introduction Page.</Typography>\n        </Container>\n      </Grid>\n    </Grid>\n*/\n}\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport const About = ({ id }) => {\n  return (\n    <Container\n      id={id}\n      style={{ backgroundColor: \"red\", height: \"100vh\" }}\n      maxWidth=\"xl\"\n    >\n      <Typography component=\"div\">This is my Introduction Page.</Typography>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nexport const Timeline = ({ id }) => {\n  return (\n    <Container\n      id={id}\n      maxWidth=\"xl\"\n      style={{ backgroundColor: \"#cfe8fc\", height: \"100vh\" }}\n    >\n      <Typography component=\"div\">This is my Timeline.</Typography>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Fragment } from \"react\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { Introduction } from \"./components/Introduction\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { About } from \"./components/About\";\nimport { Timeline } from \"./components/Timeline\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <div id=\"nav\">\n        <Sidebar />\n      </div>\n\n      <div id=\"content\">\n        <Introduction id=\"introduction\" />\n        <About id=\"about\" />\n        <Timeline id=\"timeline\" />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}